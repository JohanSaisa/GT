// <auto-generated />
using System;
using GT.Data.Data.GTAppDb;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GT.Data.Migrations.GTAppMigrations
{
    [DbContext(typeof(GTAppContext))]
    [Migration("20220321145147_RenamePropAndNormalize")]
    partial class RenamePropAndNormalize
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AddressCompany", b =>
                {
                    b.Property<string>("AddressesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompaniesId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AddressesId", "CompaniesId");

                    b.HasIndex("CompaniesId");

                    b.ToTable("AddressCompany");
                });

            modelBuilder.Entity("GT.Data.Data.GTAppDb.Entities.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("GT.Data.Data.GTAppDb.Entities.Company", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("GT.Data.Data.GTAppDb.Entities.Listing", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("Date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("EmployerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("FTE")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ListingTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("SalaryMax")
                        .HasColumnType("int");

                    b.Property<int?>("SalaryMin")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployerId");

                    b.ToTable("Listings");
                });

            modelBuilder.Entity("GT.Data.Data.GTAppDb.Entities.ListingInquiry", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LinkedInLink")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ListingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MessageBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MessageTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserApplicantId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ListingId");

                    b.HasIndex("UserApplicantId");

                    b.ToTable("ListingInquiries");
                });

            modelBuilder.Entity("GT.Data.Data.GTIdentityDb.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(70)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("AddressCompany", b =>
                {
                    b.HasOne("GT.Data.Data.GTAppDb.Entities.Address", null)
                        .WithMany()
                        .HasForeignKey("AddressesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GT.Data.Data.GTAppDb.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GT.Data.Data.GTAppDb.Entities.Listing", b =>
                {
                    b.HasOne("GT.Data.Data.GTAppDb.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("GT.Data.Data.GTIdentityDb.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GT.Data.Data.GTAppDb.Entities.Company", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId");

                    b.Navigation("Address");

                    b.Navigation("CreatedBy");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("GT.Data.Data.GTAppDb.Entities.ListingInquiry", b =>
                {
                    b.HasOne("GT.Data.Data.GTAppDb.Entities.Listing", null)
                        .WithMany("Inquiries")
                        .HasForeignKey("ListingId");

                    b.HasOne("GT.Data.Data.GTIdentityDb.Entities.ApplicationUser", "UserApplicant")
                        .WithMany()
                        .HasForeignKey("UserApplicantId");

                    b.Navigation("UserApplicant");
                });

            modelBuilder.Entity("GT.Data.Data.GTAppDb.Entities.Listing", b =>
                {
                    b.Navigation("Inquiries");
                });
#pragma warning restore 612, 618
        }
    }
}
